JP: START

REG1 = 0x00
REG2 = 0X00
REG3 = 0x00
REG4 = 0x00
REGA = 0x00
REGB = 0x00
REGC = 0x00

//月と日を取得
REG1 = 0xF0
JUMP LD: MEM_READ
REG3 = REG2
REG1 = 0xF1
JUMP LD: MEM_READ
REG1 = REG3
//VFDに表示
JUMP LD: WRITE_VFD

REG1 = 0x00
REG2 = 0X00
REG3 = 0x00
REG4 = 0x00
REGA = 0x00
REGB = 0x00
REGC = 0x00

JP: LOOP1
	//時間 分 を取得
	REG1 = 0xF2
	JUMP LD: MEM_READ
	REG3 = REG2
	REG1 = 0xF3
	JUMP LD: MEM_READ
	REG1 = REG3
	JUMP LD: WRITE_NI-12_1


	//秒 m秒 を取得
	REG1 = 0xF4
	JUMP LD: MEM_READ
	REG3 = REG2
	REG1 = 0xF5
	JUMP LD: MEM_READ
	REG1 = REG3
	JUMP LD: WRITE_NI-12_2

	REG1 = 0x01
	JUMP LD: MEM_READ
	REGA = REG2
	REG1 = REG3
	0 = REGA + REG1
	JUMP FGLD
	JUMP !! JP: LOOP5

JP: LOOP6

	REG1 = 0x01
	REG2 = REG3
	JUMP LD: MEM_WRITE

	REG1 = 0x01
	REGA = REG4
	REG4 = REGA + REG1
	JUMP FGLD
	REGA = 0x00
	JUMP ++ JP: LOOP2
JUMP JP: LOOP1

JP: LOOP2
	REG1 = 0x01
	REGA = REG4
	REG4 = REGA + REG1
	JUMP FGLD
	JUMP ++ JP: LOOP9

	//VFDに表示
	REG1 = REG4
	REG1 =<< REG1
	REG1 =<< REG1
	REG1 =<< REG1
	REG1 =<< REG1
	REG2 = REG1

	REG1 = REG4
	REG1 =<< REG1
	REG1 =<< REG1
	REG1 =<< REG1
	REG1 =<< REG1

	REG1 =>> REG1
	REG1 =>> REG1
	REG1 =>> REG1
	REG1 =>> REG1

	REGA = REG2
	REG1 = REGA + REG1
	REG2 = REG1
	JUMP LD: WRITE_VFD

	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5
	NOP 0xF5

	//ニキシー管に表示	
	JUMP LD: WRITE_NI-12_1

	//ニキシー管に表示
	JUMP LD: WRITE_NI-12_2
JUMP JP: LOOP2

JP: LOOP9
	//.SS表示
	REG1 = 0x11
	REGA = REG4
	REG4 = REGA + REG1
	JUMP FGLD
	JUMP ++ JP: LOOP7

	//VFDに表示
	REG1 = REG4
	REG1 =<< REG1
	REG1 =<< REG1
	REG1 =<< REG1
	REG1 =<< REG1
	REG2 = REG1

	REG1 = REG4
	REG1 =<< REG1
	REG1 =<< REG1
	REG1 =<< REG1
	REG1 =<< REG1

	REG1 =>> REG1
	REG1 =>> REG1
	REG1 =>> REG1
	REG1 =>> REG1

	REGA = REG2
	REG1 = REGA + REG1
	REG2 = REG1
	JUMP LD: WRITE_VFD

	//ニキシー管に表示	
	JUMP LD: WRITE_NI-12_1
	
	REG3 = REG1
	REG1 = 0xF5
	JUMP LD: MEM_READ
	REG1 = REG3
	//ニキシー管に表示
	JUMP LD: WRITE_NI-12_2
JUMP JP: LOOP9

JP: LOOP7
	//SS.SS表示
	REG1 = 0x21
	REGA = REG4
	REG4 = REGA + REG1
	JUMP FGLD
	JUMP ++ JP: LOOP3

	//VFDに表示
	REG1 = REG4
	REG1 =<< REG1
	REG1 =<< REG1
	REG1 =<< REG1
	REG1 =<< REG1
	REG2 = REG1

	REG1 = REG4
	REG1 =<< REG1
	REG1 =<< REG1
	REG1 =<< REG1
	REG1 =<< REG1

	REG1 =>> REG1
	REG1 =>> REG1
	REG1 =>> REG1
	REG1 =>> REG1

	REGA = REG2
	REG1 = REGA + REG1
	REG2 = REG1
	JUMP LD: WRITE_VFD

	//ニキシー管に表示	
	JUMP LD: WRITE_NI-12_1
	
	REG1 = 0xF4
	JUMP LD: MEM_READ
	REG3 = REG2
	REG1 = 0xF5
	JUMP LD: MEM_READ
	REG1 = REG3
	//ニキシー管に表示
	JUMP LD: WRITE_NI-12_2
JUMP JP: LOOP7

JP: LOOP3
	REG4 = 0x00
	//VFDに表示
	REG1 = REG4
	REG2 = REG4
	JUMP LD: WRITE_VFD
	REG1 = REG4
	REG2 = REG4
	JUMP LD: WRITE_NI-12_1
	REG1 = REG4
	REG2 = REG4
	JUMP LD: WRITE_NI-12_2

	//月と日を取得
	REG1 = 0xF0
	JUMP LD: MEM_READ
	REG3 = REG2
	REG1 = 0xF1
	JUMP LD: MEM_READ
	REG1 = REG3
	//VFDに表示
	JUMP LD: WRITE_VFD
JUMP JP: LOOP1

JP: LOOP4
	//ニキシー管 点 点灯
	OUT1 = 0B00010000

	//時間 分 を取得
	REG1 = 0xF2
	JUMP LD: MEM_READ
	//ニキシー管 点 点灯
	OUT1 = 0B00010000
	REG3 = REG2
	REG1 = 0xF3
	JUMP LD: MEM_READ
	//ニキシー管 点 点灯
	OUT1 = 0B00010000
	REG1 = REG3
	JUMP LD: WRITE_NI-12_1
	//ニキシー管 点 点灯
	OUT1 = 0B00010000


	//秒 m秒 を取得
	REG1 = 0xF4
	JUMP LD: MEM_READ
	//ニキシー管 点 点灯
	OUT1 = 0B00010000
	REG3 = REG2
	REG1 = 0xF5
	JUMP LD: MEM_READ
	//ニキシー管 点 点灯
	OUT1 = 0B00010000
	REG1 = REG3
	JUMP LD: WRITE_NI-12_2
	//ニキシー管 点 点灯
	OUT1 = 0B00010000

	REG1 = 0x01
	JUMP LD: MEM_READ
	//ニキシー管 点 点灯
	OUT1 = 0B00010000
	REGA = REG2
	REG1 = REG3
	0 = REGA + REG1
	JUMP FGLD
	JUMP !! JP: LOOP6

JP: LOOP5

	REG1 = 0x01
	REG2 = REG3
	JUMP LD: MEM_WRITE
	//ニキシー管 点 点灯
	OUT1 = 0B00010000

	REG1 = 0x01
	REGA = REG4
	REG4 = REGA + REG1
	JUMP FGLD
	REGA = 0x00
	JUMP ++ JP: LOOP2
JUMP JP: LOOP4

JP: END
JUMP JP: END



//以下ライブラリ

//REG1 : 上部データ
//REG2 : 下部DATA
//破壊レジスタ REGA
JP: WRITE_NI-12_2
	OUT1&2 = 0x00

	//上部書き込み
	REGA = REG1
	OUT2 = REGA
	OUT1 = 0B00001000
	OUT1 = 0B00001001
	OUT1 = 0B00001000
	OUT1 = 0x00

	//下部書き込み
	REGA = REG2
	OUT2 = REGA
	OUT1 = 0B00001100
	OUT1 = 0B00001101
	OUT1 = 0B00001100

	OUT1 = 0x00
	OUT2 = 0x00
JUMP QD: RETURN


//REG1 : 上部データ
//REG2 : 下部DATA
//破壊レジスタ REGA
JP: WRITE_NI-12_1
	OUT1&2 = 0x00

	//上部書き込み
	REGA = REG1
	OUT2 = REGA
	OUT1 = 0B00000000
	OUT1 = 0B00000001
	OUT1 = 0B00000000
	OUT1 = 0x00

	//下部書き込み
	REGA = REG2
	OUT2 = REGA
	OUT1 = 0B00000100
	OUT1 = 0B00000101
	OUT1 = 0B00000100

	OUT1 = 0x00
	OUT2 = 0x00
JUMP QD: RETURN

//REG1 : 上部データ
//REG2 : 下部DATA
//破壊レジスタ REGA
JP: WRITE_VFD
	OUT1&2 = 0x00

	//上部書き込み
	REGA = REG1
	OUT2 = REGA
	OUT1 = 0B00000000
	OUT1 = 0B00000010
	OUT1 = 0B00000000
	OUT1 = 0x00

	//下部書き込み
	REGA = REG2
	OUT2 = REGA
	OUT1 = 0B00010000
	OUT1 = 0B00010010
	OUT1 = 0B00010000

	OUT1 = 0x00
	OUT2 = 0x00
JUMP QD: RETURN

//REG1 : ADDRESS
//REG2 : DATA
//破壊レジスタ REGA REGB REGC
JP: MEM_WRITE
	OUT1&2 = 0x00

	//ADDRESS書き込み
	REGA = REG1
	OUT2 = REGA

	//ビージー待ち
	JP: __MEM_WRITE_NLOOP_1
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_WRITE_NLOOP_2
	JUMP JP: __MEM_WRITE_NLOOP_1
	JP: __MEM_WRITE_NLOOP_2
	
	//書き込み信号&アドレス信号を立てる
	OUT1 = 0b01100000

	//NOT ビージー待ち
	JP: __MEM_WRITE_NLOOP_3
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_WRITE_NLOOP_3

	//読み出しOK?
	JP: __MEM_WRITE_NLOOP_4
		REGA = IN2
		REG1 = 0B11111111
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_WRITE_NLOOP_5
		JUMP JP: __MEM_WRITE_NLOOP_4
	JP: __MEM_WRITE_NLOOP_5

	//書き込み
	OUT1 = 0b00100000
	
	//ビージー待ち
	JP: __MEM_WRITE_NLOOP_6
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_WRITE_NLOOP_7
	JUMP JP: __MEM_WRITE_NLOOP_6
	JP: __MEM_WRITE_NLOOP_7

	OUT1 = 0b00000000
	//ここでADDRESS書き込み完了

	OUT1&2 = 0x00
	//DATA書き込み
	REGA = REG2
	OUT2 = REGA

	//ビージー待ち
	JP: __MEM_WRITE_NLOOP_8
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_WRITE_NLOOP_9
	JUMP JP: __MEM_WRITE_NLOOP_8
	JP: __MEM_WRITE_NLOOP_9
	
	//書き込み信号&DATA信号を立てる
	OUT1 = 0b01000000

	//NOT ビージー待ち
	JP: __MEM_WRITE_NLOOP_10
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_WRITE_NLOOP_10

	//読み出しOK?
	JP: __MEM_WRITE_NLOOP_11
		REGA = IN2
		REG1 = 0B11111111
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_WRITE_NLOOP_12
		JUMP JP: __MEM_WRITE_NLOOP_11
	JP: __MEM_WRITE_NLOOP_12

	//書き込み
	OUT1 = 0b00000000
	
	//ビージー待ち
	JP: __MEM_WRITE_NLOOP_13
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_WRITE_NLOOP_14
	JUMP JP: __MEM_WRITE_NLOOP_13
	JP: __MEM_WRITE_NLOOP_14

	OUT1 = 0b00000000
	//ここでDATA書き込み完了
JUMP QD: RETURN


//REG1 : ADDRESS
//REG2 : DATA
//破壊レジスタ REGA REGB REGC
JP: MEM_READ
	OUT1&2 = 0x00

	//ADDRESS書き込み
	REGA = REG1
	OUT2 = REGA

	//ビージー待ち
	JP: __MEM_READ_NLOOP_1
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_READ_NLOOP_2
	JUMP JP: __MEM_READ_NLOOP_1
	JP: __MEM_READ_NLOOP_2
	
	//書き込み信号&アドレス信号を立てる
	OUT1 = 0b01100000

	//NOT ビージー待ち
	JP: __MEM_READ_NLOOP_3
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_READ_NLOOP_3

	//読み出しOK?
	JP: __MEM_READ_NLOOP_4
		REGA = IN2
		REG1 = 0B11111111
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_READ_NLOOP_5
		JUMP JP: __MEM_READ_NLOOP_4
	JP: __MEM_READ_NLOOP_5

	//書き込み
	OUT1 = 0b00100000
	
	//ビージー待ち
	JP: __MEM_READ_NLOOP_6
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_READ_NLOOP_7
	JUMP JP: __MEM_READ_NLOOP_6
	JP: __MEM_READ_NLOOP_7

	OUT1 = 0b00000000
	//ここでADDRESS書き込み完了

	//DATA読み込み

	//ビージー待ち
	JP: __MEM_READ_NLOOP_8
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_READ_NLOOP_9
	JUMP JP: __MEM_READ_NLOOP_8
	JP: __MEM_READ_NLOOP_9
	
	//DATA読み込み信号を立てる
	OUT1 = 0b10000000

	//NOT ビージー待ち
	JP: __MEM_READ_NLOOP_10
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_READ_NLOOP_10

	//読み出しOK?
	JP: __MEM_READ_NLOOP_11
		REGA = IN2
		REG1 = 0B11111111
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_READ_NLOOP_12
		JUMP JP: __MEM_READ_NLOOP_11
	JP: __MEM_READ_NLOOP_12

	//書き込み
	OUT1 = 0b00000000
	
	//ビージー待ち
	JP: __MEM_READ_NLOOP_13
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_READ_NLOOP_14
	JUMP JP: __MEM_READ_NLOOP_13
	JP: __MEM_READ_NLOOP_14

	//CPUへ読み込み
	REG2 = IN1
	OUT1 = 0B00000000

	OUT1 = 0b10000000

	//NOT ビージー待ち
	JP: __MEM_READ_NLOOP_15
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_READ_NLOOP_15

	OUT1 = 0B00000000
	//ここでDATA読み込み完了

	//ビージー待ち
	JP: __MEM_READ_NLOOP_16
		REGA = IN2
		REG1 = 0B11111110
		0 = REGA + REG1
		JUMP FGLD
		JUMP ++ JP: __MEM_READ_NLOOP_17
	JUMP JP: __MEM_READ_NLOOP_16
	JP: __MEM_READ_NLOOP_17
JUMP QD: RETURN